* 기본

Rust 는 C, C++, Java와 비슷한 느낌으로 중괄호를 사용한다.
if, while도 비슷하게 사용하며, function call 또한 func(arg1, arg2); 처럼 비슷하게 사용한다.
주석 또한 C와 동일하게 작성하며, namespace를 나누는 기호도 ::로 C++과 동일하다.

겉보기에 다른점은 if나 while등을 사용할 때, 조건을 괄호()로 묶지 않아도 된다는 점이다.
하지만 구동 될 코드 자체는 단 한줄이라 하더라도 중괄호로 묶어야 한다.

'''
fn main() {
    loop {
        if universe::recalibrate() {
            return;
        }
    }
}
'''

let 은 지역 변수를 만들때 사용한다. 
변수들은 기본적으로 immutable 하기 때문에, 나중에 변경될 변수를 만들기 위해서는 let mut 라고 써야 한다.

'''
let hi = "hi";
let mut count = 0;

while count < 10 {
    println!("count is {}", count);
    count += 1;
}
'''

Rust 에서 지역변수는 항상 타입이 추론되지만, let에 colon(:)을 사용하여 type을 명시적으로 type을 정할 수 있으며,
static 변수의 경우에는 반드시 type을 지정 해야 한다.

'''
static MONSTER_FACTOR: f64 = 57.8;
let monster_size = MONSTER_FACTOR * 10.0;
let monster_size: int = 50;
'''

위 예에서 monster_size가 보여 주듯이, 지역변수는 이전에 선언된 같은 이름의 지역변수를 덮을 수 있습니다.
monster_size는 최초엔 type 추론을 통해 f64로 선언되었지만, 이후에 int로 다시 선언 됩니다.
이 예제를  compile 하게 되면, 첫번째 monster_size가 사용되지 않았다는 warning 메세지가 출력 됩니다.
만약 의도적으로 사용되지 않는 변수를 위해 warning을 제거하고 싶다면 변수명을 underscore(_)로 시작 하면 됩니다.
ex) let _monster_size = 50;

Rust의 식별자는 알파벳과 underscore(_)로 시작할수 있으며, 알파벳,숫자,underscore로 나머지를 구성할 수 있다.
함수, 변수, 모듈 이름등을 쓸때는 소문자로 시작하는 Camel case가 기본 스타일이며, 읽기 쉽게 하기 위해 underscore를 사용할 수 있다.

'''
let my_variable = 100;
type MyType = int; // 기본형은 camel case 안씀.


* 표현식과 세미콜론

C와 비슷한 다른 언어들과 Rust가 핵심적으로 다른 부분은 C에서 사용하는 것과 같은 표현식을 Rust에서는 축약해서 사용한다는 것이다.

Rust에서는 아래처럼 사용할 수도 있지만.
'''
let price;
if item == "salad" {
    price = 3.50;
} else if item == "muffin" {
    price = 2.25;
} else {
    price = 2.00;
}
'''

price를 여러번 쓸 필요 없이 다음처럼 사용 가능하다.
'''
let price = 
    if item == "salad" {
        3.50
    } else if item == "muffin" {
        2.25
    } else {
        2.00
    };
'''

양쪽 코드 모두 price에 item에 따라 다른 값을 넣는 동일한 동작을 하는 코드이지만,
중요한 부분은 두번째 예에서 세미콜론이 중괄호 사이 블럭의 끝에 없는것이다.
블럭안의 마지막 문장에 세미콜론이 없으면 전체 블럭은 마지막 표현식의 값을 나타내게 된다.

또한 세미콜론은 Rust에서 문장의 값을 무시하는데 사용된다. 만약 if block이 {4;} 와 같이 세미콜론으로 끝나 버린다면,
price에는 () (nil 혹은 void)가 적용되게 된다. 그러나, 세미콜론이 없다면 주어진 각 값이 적용되게 된다.

함수의 몸통을 포함해서, 정의식(let으로 변수 정의, fn으로 함수 정의 traits, enum type, static 등)이 아닌 모든것은 표현식이다.
'''
fn is_four(x:int) -> bool {
    // return 이 필요 없음. 표현식의 값이 곧 return value
    x == 4
}
'''


* 기본 자료형과 상수

Rust는 기본적인 부호가 있거나 없는 정수 자료형 int, uint를 제공하며,
i8, u16 처럼 8, 16, 32, 64비트인 자료형 또한 제공한다.
정수는 10진수(144) 혹은, 16진수(0x90), 8진수(0o70), 2진수(0b10010000) 으로 표현된다.
각 정수들은 원하는 자료형을 뒤에 붙여 나타낼 수 있으며, 
int 의 i, uint의 u, i8의 i8등을 붙일 수 있다.

정수의 뒤에 자료형이 붙어있지 않은 경우 Rust는 type annotation이나 function signature등을 보고자료형을 판단한다. 다른 정보가 있지 않다면, 자료형이 붙지 않은 정수는 int 형을 가지게 된다.

'''
let a = 1;		// a는 int
let b = 10i;		// b는 i가 끝에 붙어서 int
let c = 100u;		// c는 uint
let d = 1000132;	// d는 132
'''

Rust에는 f32, f64 두 종류의 부동소수점 자료형이 있다.
부동소수점 숫자는 0.0, 1e6, 2.1e-4 처럼 작성된다.
정수형과 비슷하게 부동소수점 상수 또한 자료형이 추론되게 되며, 
f32, f64 를 끝에 붙이게 되면 각 자료형의 상수를 만들 수 있다.

true와 false 키워드는 bool 자료형의 상수로 사용된다.

char 자료형은 4byte unicode codepoint들이며, 
상수는 'x' 처럼 C와 비슷하게 single quote(')로 감싸게 된다.
Rust는 \n, \r, \t처럼  backslash로 몇가지 escape 문자를 사용할수 있다. 
double quote(")로 감싸진 문자열 상수에서도 같은 escape 문자들을 사용할수 있지만,
PHP나 shell처럼 문자열 안에 다른 기능이 있진 않다.
r##"blah"## 처럼 #를 0개 이상 문자열 상수의 앞뒤에 놓게 되면,
문자열 상수 안의 escape를 해석하지 않고, 모든 것을 문자열로 만들게 된다.

nil 자료형은 ()으로 나타내 지며, () 하나만을 값으로 가지고 있다. 

* 연산자

Rust의 연산자는 그다지 신기할게 없다. C와 동일하게 산술 연산자 *, /, %, +, - 가 있고, -는 물론 숫자 앞에 붙여서 음수를 만들 수 있다.
bit연산자인 >>, <<, &, |, ^또한 지원된다.

기억해야 할것은 !가 정수값에 적용된다면 모든 bit를 역전 시킬 것이라는 것이다. (마치 C의 ~처럼)

비교 연산자는 ==, !=, <, >, <=, >= 이 제공되며, 단락을 비교하는 연산자로 &&과 ||이 제공된다.

Rust에서는 as 연산자를 compile 시간 형변환에 사용할수 있는데, 이것은 표현식의 왼쪽에 붙어서, 오른쪽의 자료형을 지정한다. 의미있는 형변환인 경우 표현식의 결과가 자료형이 된다.
일반적으로 as 는 기본 숫자형 혹은 pointer들에 사용되며, 남용되게 사용하지 않는다.
transmute 는 C처럼 같은 사이즈의 형끼리 unsafe type casting을 할 때 사용된다.

'''
let x:f64 = 4.0;
let y: uint = x as uint
assert!(y == 4u);
'''

* 확장 문법

확장 문법은 언어 자체에는 포함되어 있지 않지만, library를 사용해서 제공되는 특별한 형태를 가지고 있다. 모든 syntax extension은 명확하게 !로 끝난다. 
표준 library는 몇가지 확장 문법을 정의하고 있다. 가장 많이 사용 되는 것은  format! 으로 예제들에서 많이 보이듯이, sprintf와 비슷한 문법을 가지고 있으며, 비슷한 macro들로 print!, println!, write! 를 가지고 있다.

format! 는 printf와 같은 부분을 많이 가지고 있지만, python의 문법과 비슷하게 되어 있다.
printf와는 다르게 format!는 지시자와 주어진 값의 type이 틀릴경우 compile 시간에 에러를 발생한다.

'''
// {} 는 자료형의 기본 형태를 출력한다.
println!("{} is {}", "the answer", 43);

// {:?} 는 어떤 자료형이던 알맞게 출력한다.
println!("what is this thing: {:?}", mystery_object);
'''

확장 문법을 정의하기 위해서 macro를 사용할 수 있다.
(macro 정의는 아직 unstable하다)

* 제어 구조

* 조건문

이미 if문을 몇번 봤지만, 확실히 하자면 중괄호는 반드시 필요하며, if는 부가적으로 else 구문이 하나 붙을 수 있으며, 여러개의 if else 구조가 올 수 있습니다.

'''
if false {
	println("that's odd");
} else if true {
	println("right");
} else {
	println("neither true nor false");
}
'''

if 의 조건식은 반드시 bool 형이여야 하며, (묵시적 형변환은 없습니다.) 모든 중괄호가 끝나는 곳마다 같은 형의 값이 있어야만 합니다.
'''
fn signum(x: int) -> int {
	if x < 0 { -1 }
	else if x > 0 { 1 }
	else { 0 }
}
'''

* 패턴 매칭

Rust의 match 문은 일반화된 깔끔한 버전의 C의 switch 문이다.
값 한개와 여러개의 패턴이 있는 부분들로 구성 되어 있으며, 맞는 것이 나올때까지 각 패턴들을 비교하여 맞는 패턴의 부분이 실행된다.

'''
match my_number {
	0	=> println("zero"),
	1 | 2	=> println("one or two"),
	3..10	=> println("three to ten"),
	_	=> println("something else")
}
'''

C와는 다르게, "falling through" 효과는 존재하지 않는다. 오직 한개의 부분만 실행되며, 구문이 끝날때 break가 필요 없다.

match 의 각 부분은 패턴 다음 화살표 다음으로 표현식의 형태를 가지고 있다.
상수는 동일한 값에 맞는 올바른 패턴이다. 
각 부분은 여러개의 다른 패턴을 pipe 연산자(|) 로 연결하여 가질 수 있다. 
숫자 상수의 범위 패턴은 M..N처럼 점 두개를 사용하여 나타낼 수 있다. 
underscore(_)는 만능으로 어느값이던 맞는 패턴이다.
(..)는 다른 방식의 만능으로 한개 이상의 enum 값과 맞는 패턴이다.

패턴의 뒤에는 굵은 화살표 =>와 표현식이 차례로 따라오게 된다.
각각은 comma(,)로 나눠지게 된다. 중괄호를 사용한 표현식 구문이 각 각 들어갈 수 있으며, 이 경우 comma는 필수가 아니다.

'''
match my_number {
	0 => { println("zero") }
	_ => { println("something else") }
}
'''

match 구문의 각 부분들은 온전히 모든 경우의 수를 가지고 있어야 한다. 
예를 들어 만약 이전 예제에서 만능패턴이 없다면, 에러가 발생된다.

패턴 매칭의 강력한 부분으로 destructing이 있다. 데이터형의 내용에 이름을 걸어 사용 하는 방식이다.

! 아래 예에서는 (f64, f64)처럼 tuple을 사용하고 있습니다. tuple은 우선 여러 값의 열로 이해하면 됩니다.
'''
use std::f64;
use std::num::atan;
fn angle(vector: (f64, f64)) -> f64 {
	let pi = f64::consts::PI;
	match vector {
		(0.0, y) if y < 0.0 => 1.5 * pi,
		(0.0, y) => 0.5 * pi,
		(x, y) => atan(y / x)
	}
}
'''

패턴 안의 변수는 어느 값이라도 올 수 있으며, 안쪽 표현식에서도 사용할 수 있습니다.
위 예에서, (0.0, y)는 첫번째 값이 0인 어느 tuple도 올 수 있습니다. y는 두번째 값이 들어가게 됩니다. (x, y)는 2개의 요소를 가진 어느 tuple 이라도 올수 있습니다. 각 요소는 각 변수에 들어가게 됩니다.

match 의 각 부분들은 pattern guard 라는 bool형 표현식인 추가절을 가질 수 있으며 ( if문 형태 ), 패턴이 맞은 후 다시 실행 될지 아닐지 판단한다. 패턴 내부에 있는 변수는 이 guard 표현식의 scope안에 있으며, 이전 예의 match 구문의 첫번째 부분이 pattern guard의 예이다.

let에는 이전에 간단하게 사용된 것들보다 좀 더 다양한 방식이 있습니다. let 또한 destructing 을 지원합니다. 예를 들어 tuple의 요소를 나눠서 사용할 수 있습니다. 두 요소를 a, b라고 하면,
'''
let (a, b) = get_tuple_of_two_ints();
'''
let의 패턴은 모든 경우의 수를 지원하는 경우에만 가능하다. 이 때문에 let 패턴에는 상수나 enum 변수를 사용할 수 없다.
