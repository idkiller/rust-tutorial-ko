
* 기본 자료형과 상수

Rust는 기본적인 부호가 있거나 없는 정수 자료형 int, uint를 제공하며,
i8, u16 처럼 8, 16, 32, 64비트인 자료형 또한 제공한다.
정수는 10진수(144) 혹은, 16진수(0x90), 8진수(0o70), 2진수(0b10010000) 으로 표현된다.
각 정수들은 원하는 자료형을 뒤에 붙여 나타낼 수 있으며, 
int 의 i, uint의 u, i8의 i8등을 붙일 수 있다.

정수의 뒤에 자료형이 붙어있지 않은 경우 Rust는 type annotation이나 function signature등을 보고자료형을 판단한다. 다른 정보가 있지 않다면, 자료형이 붙지 않은 정수는 int 형을 가지게 된다.

'''
let a = 1;		// a는 int
let b = 10i;		// b는 i가 끝에 붙어서 int
let c = 100u;		// c는 uint
let d = 1000132;	// d는 132
'''

Rust에는 f32, f64 두 종류의 부동소수점 자료형이 있다.
부동소수점 숫자는 0.0, 1e6, 2.1e-4 처럼 작성된다.
정수형과 비슷하게 부동소수점 상수 또한 자료형이 추론되게 되며, 
f32, f64 를 끝에 붙이게 되면 각 자료형의 상수를 만들 수 있다.

true와 false 키워드는 bool 자료형의 상수로 사용된다.

char 자료형은 4byte unicode codepoint들이며, 
상수는 'x' 처럼 C와 비슷하게 single quote(')로 감싸게 된다.
Rust는 \n, \r, \t처럼  backslash로 몇가지 escape 문자를 사용할수 있다. 
double quote(")로 감싸진 문자열 상수에서도 같은 escape 문자들을 사용할수 있지만,
PHP나 shell처럼 문자열 안에 다른 기능이 있진 않다.
r##"blah"## 처럼 #를 0개 이상 문자열 상수의 앞뒤에 놓게 되면,
문자열 상수 안의 escape를 해석하지 않고, 모든 것을 문자열로 만들게 된다.

nil 자료형은 ()으로 나타내 지며, () 하나만을 값으로 가지고 있다. 

* 연산자

Rust의 연산자는 그다지 신기할게 없다. C와 동일하게 산술 연산자 *, /, %, +, - 가 있고, -는 물론 숫자 앞에 붙여서 음수를 만들 수 있다.
bit연산자인 >>, <<, &, |, ^또한 지원된다.

기억해야 할것은 !가 정수값에 적용된다면 모든 bit를 역전 시킬 것이라는 것이다. (마치 C의 ~처럼)

비교 연산자는 ==, !=, <, >, <=, >= 이 제공되며, 단락을 비교하는 연산자로 &&과 ||이 제공된다.

Rust에서는 as 연산자를 compile 시간 형변환에 사용할수 있는데, 이것은 표현식의 왼쪽에 붙어서, 오른쪽의 자료형을 지정한다. 의미있는 형변환인 경우 표현식의 결과가 자료형이 된다.
일반적으로 as 는 기본 숫자형 혹은 pointer들에 사용되며, 남용되게 사용하지 않는다.
transmute 는 C처럼 같은 사이즈의 형끼리 unsafe type casting을 할 때 사용된다.

'''
let x:f64 = 4.0;
let y: uint = x as uint
assert!(y == 4u);
'''
'''
